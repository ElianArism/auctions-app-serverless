# Metatada of the servicec
service: sls-integrador-elian-${self:provider.stage}
frameworkVersion: "3"

plugins:
  - serverless-offline
  - serverless-esbuild
  - serverless-prune-plugin

# information about the cloud provider and needed technologies
provider:
  name: aws
  runtime: nodejs16.x
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  environment:
    AUCTIONS_BUCKET_NAME: ${self:custom.AuctionsBucket.name}
    AUCTIONS_TABLE_NAME: ${self:resources.Resources.AuctionsTable.Properties.TableName}
    AUTH_KEY: ${file(secret.pem)}
    MAIL_QUEUE_URL: ${self:custom.MailQueue.url}
    REGION: ${self:provider.region}
  # To grant access to any created resource, you need specify the roles/permissions
  iamRoleStatements:
    - ${file(resources/dynamo/auctions-table/iam-roles.yml):AuctionsTableIAM}
    - ${file(resources/mail-sqs/iam.yml):MailSQSConsumerIAM}

# place to define props which aren't part of the sls framework core (plugins config for example)
custom:
  bundle:
    bundle: true
    minify: true
    sourcemap: true
    linting: false
  AuctionsBucket:
    name: sls-elian-auctions-s3-bucket-${self:provider.stage}
  # Import outputs from notification-service-stack
  MailQueue:
    arn: ${cf:notification-service-${self:provider.stage}}.MailQueueArn
    url: ${cf:notification-service-${self:provider.stage}}.MailQueueUrl

# lambda functions of the stack
functions:
  health:
    handler: src/handlers/health.handler
    events:
      - http:
          method: GET
          path: health
          authorizer: authLambda

  createAuction:
    handler: src/handlers/create-auction.handler
    events:
      - http:
          method: POST
          path: create-auction
          cors: true
          authorizer: authLambda

  getAuctions:
    handler: src/handlers/get-auctions.handler
    events:
      - http:
          method: GET
          path: auctions
          authorizer: authLambda

  getAuctionById:
    handler: src/handlers/get-auction-by-id.handler
    events:
      - http:
          method: GET
          path: auction/{id}
          authorizer: authLambda

  placeBid:
    handler: src/handlers/place-bid.handler
    events:
      - http:
          method: PATCH
          path: auction/{id}/bid
          cors: true
          authorizer: authLambda

  uploadAuctionPicture:
    handler: src/handlers/upload-auction-picture.handler
    events:
      - http:
          method: PATCH
          path: auction/{id}/picture
          authorizer: authLambda

  processAuction:
    handler: src/handlers/process-auction.handler
    # REVIEW Commented 4 now
    # events:
    #   - schedule:
    #       name: process_auction
    #       rate: rate(1 minute)

  authLambda:
    handler: src/auth/authorizer.handler

# resources needed
resources:
  Resources:
    # Cloudformation Syntax
    # S3
    AuctionsBucket: ${file(resources/buckets/auctions-bucket/auctions-bucket.yml):AuctionsBucket}
    AuctionsBucketPolicy: ${file(resources/buckets/auctions-bucket/auctions-bucket.yml):AuctionsBucketPolicy}
    # Dynamo
    AuctionsTable: ${file(resources/dynamo/auctions-table/definition.yml):AuctionsTable}
    # This response is needed for custom authorizer failures cors support ¯\_(ツ)_/¯
    GatewayResponse:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: EXPIRED_TOKEN
        RestApiId:
          Ref: "ApiGatewayRestApi"
        StatusCode: "401"
    AuthFailureGatewayResponse:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: "ApiGatewayRestApi"
        StatusCode: "401"
